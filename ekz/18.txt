18) параллельное программирование на Python. GIL
	https://tproger.ru/translations/global-interpreter-lock-guide/
	GIL – Global Interpreter Lock
	это своеобразная блокировка, позволяющая только одному потоку управлять интерпретатором Python. Это означает, что в любой момент времени будет выполняться только один конкретный поток.
	
	Он добавляет правило: любое выполнение байткода в Python требует блокировки интерпретатора. В таком случае можно исключить взаимоблокировку, т. к. GIL будет единственной блокировкой в приложении. К тому же его влияние на производительность процессора совсем не критично. Однако стоит помнить, что GIL уверенно делает любую программу однопоточной.

	Ниже приведена простая CPU-bound программа, которая попросту ведёт обратный отсчёт:	
	# single_threaded.py
	import time
	from threading import Thread
	
	COUNT = 50000000
	
	def countdown(n):
		while n > 0:
			n -= 1
	
	start = time.time()
	countdown(COUNT)
	end = time.time()
	
	print('Затраченное время -', end - start)
	
	Ниже приведена та же программа, с небольшим изменением. Теперь обратный отсчёт ведётся в двух параллельных потоках:

	# multi_threaded.py
	import time
	from threading import Thread
	
	COUNT = 50000000
	
	def countdown(n):
		while n > 0:
			n -= 1
	
	t1 = Thread(target=countdown, args=(COUNT//2,))
	t2 = Thread(target=countdown, args=(COUNT//2,))
	
	start = time.time()
	t1.start()
	t2.start()
	t1.join()
	t2.join()
	end = time.time()
	
	print('Затраченное время -', end - start)
	
	Многопроцессность против многопоточности. Довольно популярное решение, поскольку у каждого Python-процесса есть собственный интерпретатор с выделенной под него памятью, поэтому с GIL проблем не будет. В Python уже есть модуль multiprocessing, который упрощает создание процессов к такому виду:

	from multiprocessing import Pool
	import time
	
	COUNT = 50000000
	def countdown(n):
		while n > 0:
			n -= 1
	
	if __name__ == '__main__':
		pool = Pool(processes=2)
		start = time.time()
		r1 = pool.apply_async(countdown, [COUNT//2])
		r2 = pool.apply_async(countdown, [COUNT//2])
		pool.close()
		pool.join()
		end = time.time()
		print('Затраченное время в секундах -', end - start)