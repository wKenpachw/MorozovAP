параллельное программирование на Python. Гнераторы
	https://webdevblog.ru/vvedenie-v-generatory-python/
	Генераторы — итерируемые объекты, но, в общем случае, вы можете их использовать только один раз. Это связано с тем, что они не хранят все значения в памяти, а генерируют значения «на лету» — по мере запроса
	Yield — это ключевое слово которое используется так же, как и слово return. Разница в том, что функция при этом начинает возвращать генератор вместо значения.
	когда вы вызываете функцию, в теле которой находится yield, выполнение этой функции не происходит. Вместо выполнения, функция вернёт объект-генератор.
	При первом исполнении кода тела функции код будет выполнен с начала и до первого встретившегося оператора yield. После этого будет возвращено первое значение и выполнение тела функции опять приостановлено. Запрос следующего значения у генератора во время итерации заставит код тела функции выполняться дальше (с предыдущего yield’а), пока не встретится следующий yield. Генератор считается «закончившимся» в случае если при очередном исполнении кода тела функции не было встречено ни одного оператора yield.
	
	def countdown(num):
		print('Starting')
		while num > 0:
			yield num
			num -= 1
	
	Объекты генератора выполняются при вызове next(): next(val)
	Пример 1
	def emit_lines(pattern=None):
		lines = []
		for dir_path, dir_names, file_names in os.walk('test/'):
			for file_name in file_names:
				if file_name.endswith('.py'):
					for line in open(os.path.join(dir_path, file_name)):
						if pattern in line:
							lines.append(line)
		return lines
	Эта функция просматривает набор файлов в указанном каталоге. Она открывает каждый файл и затем просматривает каждую строку, чтобы проверить соответствие шаблону.
	